

exports.configFile = __dirname + "/../../config/settings.json";
exports.config = {};
exports.hasConfig = false;
exports.db = {};
exports.Schema = {};
exports.app = {};
exports.response = {};
exports.request = {};
exports.next;
exports.modules = {};
exports.Resources = {};
exports.menus = {};
exports.responseSent = false;

exports.boot = function(request, response, next){

    // load the configuration file
    this.loadConfig(request, response, next);

    // connect database
    this.connectDatabase();

    // load modules
    this.load('modules');

    // initialize the application
    this.init();
};

exports.init = function(){
    // if no config then don't init anything
    if (this.config.length == 0)
        return;

    this.invoke('init');

    this.menu();

};


exports.loadConfig = function(request, response, next){
    var merge = require('merge'), url = require('url');
    var content = fileSys.readFileSync(this.configFile).toString();
    var data = eval('('+content+')');

    this.request = request;
    this.response = response;
    this.next = next;

    this.request.url = this.utils.stripTrailingSlash(this.request.url);

    this.config = {
        url : {
            host : request.headers.host,
            path : url.parse(request.url).pathname
        }
    };

    this.config = merge(this.config, data);

    if (data.length > 0){
        console.log('Configuration Loaded....');
    }
};


exports.connectDatabase = function(){

    // create database connection
    this.db = mongoose.createConnection();
    // handle database connection error
    this.db.on('error', console.error.bind(console, 'connection error:'));
    // database open
    this.db.open(this.config.database.server, this.config.database.name, this.config.database.port);

    // check for database connection
    this.db.on('open', function(){
        console.log('Connection Opened!');
    });

    this.createSchema();

//    this.Schema.User.find({'vorname' : 'Mubashar'},function(err, users){
//
////        console.log(users);
//
//    });
};

exports.isConfigured = function(){
    if (this.config.length > 0){
        return true;
    }else {
        return false;
    }
}

exports.createSchema = function(){
//    var UserSchema = new mongoose.Schema({
//        username : String,
//        email : String,
//        password : String
//    });
//    this.Schema.User = this.db.model('Users', UserSchema, 'users');
//    console.log('Schema Created!');

    var menuSchema = new mongoose.Schema({
            link : String,
            module : String,
            title  : String,
            type : String,
            page : {
                callback : String,
                arguments : Array
            },
            access : {
                callback : String,
                arguments : Array
            }
    });

    this.Schema.Menus = this.db.model('Menus', menuSchema, 'menus');
}

exports.__init = function(){
//    this.createSchema();
}

exports.render = function(view, data){

    var merge = require('merge'), ejs = require('ejs');
    var theme_path = 'themes/'+this.config.theme;
//    var theme_path = this.config.admin_theme;

    data = merge(this.config, data);
    data.page_title = this.config.site_name;
    data.GizmoContent = view;
//    console.log(view);

    this.response.render(theme_path + '/index', data);

    this.responseSent = true;
}

exports.load = function(type){

    switch(type){
        case 'modules':
            var mods = fileSys.readdirSync(__dirname+'/modules');

            for(var i in mods){
                var tempModule = mods[i].split('.');
                var name = tempModule[0];
                var type = tempModule[1];
                var file = null;
                if (type == 'module'){
                    file = GizmoCore.Resources.path.join(__dirname, '/modules/'+mods[i]);
                    this.modules[name] = require(file);
                }
            }
            console.log('modules loaded');
            break;
    }
}

exports.invoke = function(hook, module){

    if (module != undefined){
        this.modules[module][hook]();
    }else {
        for(var module in this.modules){
            this.modules[module][hook]();
        }
    }
}

exports.menu = function () {

    var menusArray = [], MenuLink = null;
    for(var name in this.modules){
        menusArray = this.modules[name].menu();
        for(var link in menusArray){
            MenuLink = this.utils.stripTrailingSlash(link);
            this.menus[MenuLink] = menusArray[link];
            this.menus[MenuLink].module = name;
        }
    }
    var currentMenu = null;
    if (this.menus[this.request.url] != undefined) {
        currentMenu = this.menus[this.request.url]
        console.log(currentMenu);
        this.modules[currentMenu.module][currentMenu.page.callback]({
            req : this.request,
            res : this.response
        });
        console.log('menu found!');
    } else {
        this.render('error', {error : {title : 'Error 404', message: 'Page not found.'}});
        console.log('No menu found!');
    }
}

exports.utils = {
    stripTrailingSlash : function (str) {
        if(str.substr(-1) == '/') {
            return str.substr(0, str.length - 1);
        }
        return str;
    }
}